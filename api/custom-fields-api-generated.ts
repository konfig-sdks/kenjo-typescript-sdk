/* tslint:disable */
/* eslint-disable */
/*
Kenjo API

Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFieldsGetList400Response } from '../models';
// @ts-ignore
import { CustomFieldsGetListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldsApi - axios parameter creator
 * @export
 */
export const CustomFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of the existing custom fields in Kenjo.
         * @param {string} authorization A valid bearer token.
         * @param {'personal' | 'work' | 'address' | 'financial' | 'home'} [section] The name of custom field section.
         * @param {string} [label] The name of the custom field label.
         * @param {string} [apiName] The api name is a required identifier to perform POST and PUT operations with employees.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (authorization: string, section?: 'personal' | 'work' | 'address' | 'financial' | 'home', label?: string, apiName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getList', 'authorization', authorization)
            const localVarPath = `/custom-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (section !== undefined) {
                localVarQueryParameter['section'] = section;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (apiName !== undefined) {
                localVarQueryParameter['apiName'] = apiName;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom-fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldsApi - functional programming interface
 * @export
 */
export const CustomFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of the existing custom fields in Kenjo.
         * @param {CustomFieldsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: CustomFieldsApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.authorization, requestParameters.section, requestParameters.label, requestParameters.apiName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldsApi - factory interface
 * @export
 */
export const CustomFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldsApiFp(configuration)
    return {
        /**
         * Returns a list of the existing custom fields in Kenjo.
         * @param {CustomFieldsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: CustomFieldsApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsGetListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getList operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiGetListRequest
 */
export type CustomFieldsApiGetListRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof CustomFieldsApiGetList
    */
    readonly authorization: string
    
    /**
    * The name of custom field section.
    * @type {'personal' | 'work' | 'address' | 'financial' | 'home'}
    * @memberof CustomFieldsApiGetList
    */
    readonly section?: 'personal' | 'work' | 'address' | 'financial' | 'home'
    
    /**
    * The name of the custom field label.
    * @type {string}
    * @memberof CustomFieldsApiGetList
    */
    readonly label?: string
    
    /**
    * The api name is a required identifier to perform POST and PUT operations with employees.
    * @type {string}
    * @memberof CustomFieldsApiGetList
    */
    readonly apiName?: string
    
}

/**
 * CustomFieldsApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldsApiGenerated extends BaseAPI {
    /**
     * Returns a list of the existing custom fields in Kenjo.
     * @param {CustomFieldsApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public getList(requestParameters: CustomFieldsApiGetListRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
