/* tslint:disable */
/* eslint-disable */
/*
Kenjo API

Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationCreateBearerToken400Response } from '../models';
// @ts-ignore
import { CompensationGetContractsResponse } from '../models';
// @ts-ignore
import { CompensationGetSalariesListResponse } from '../models';
// @ts-ignore
import { CompensationListAdditionalPaymentTypesResponse } from '../models';
// @ts-ignore
import { CompensationListAdditionalPaymentsResponse } from '../models';
// @ts-ignore
import { CompensationListContractTypesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompensationApi - axios parameter creator
 * @export
 */
export const CompensationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a paginated list of employment contracts. The URL params help to return more accurate results.
         * @param {string} authorization A valid bearer token.
         * @param {string} [contractTypeId] Optional filter. This field allows you to retrieve contracts based on their *contractTypeId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *contractTypeId* as a unique string. &lt;br&gt;Example: *contractTypeId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *contractTypeId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *contractTypeId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {string} [userId] Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_userId* as a unique string. &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {string} [companyId] Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_companyId* as a unique string. &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {number} [offset] Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
         * @param {number} [limit] Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts: async (authorization: string, contractTypeId?: string, userId?: string, companyId?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getContracts', 'authorization', authorization)
            const localVarPath = `/compensation/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (contractTypeId !== undefined) {
                localVarQueryParameter['contractTypeId'] = contractTypeId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['_userId'] = userId;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['_companyId'] = companyId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/compensation/contracts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a paginated list of employment salaries. The URL params help to return more accurate results.
         * @param {string} authorization A valid bearer token.
         * @param {string} [userId] Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_userId* as a unique string. &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {string} [companyId] Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_companyId* as a unique string. &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {'Annual' | 'Monthly' | 'Hourly'} [paymentPeriod] Optional filter. This field allows you to retrieve contracts based on their *paymentPeriod*. Accepted values: \&#39;Annual\&#39;, \&#39;Monthly\&#39; and \&#39;Hourly\&#39;. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *paymentPeriod* as a unique string. &lt;br&gt;Example: *paymentPeriod&#x3D;Annual* &lt;br&gt;&lt;br&gt; 2. Multiple *paymentPeriod* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *paymentPeriod&#x3D;Annual,Monthly*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {string} [currency] Optional filter. This field allows you to retrieve contracts based on their *currency* (ISO 4217). It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *currency* as a unique string. &lt;br&gt;Example: *currency&#x3D;EUR* &lt;br&gt;&lt;br&gt; 2. Multiple *currency* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *currency&#x3D;EUR,USD*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {number} [offset] Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
         * @param {number} [limit] Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalariesList: async (authorization: string, userId?: string, companyId?: string, paymentPeriod?: 'Annual' | 'Monthly' | 'Hourly', currency?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getSalariesList', 'authorization', authorization)
            const localVarPath = `/compensation/salaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['_userId'] = userId;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['_companyId'] = companyId;
            }

            if (paymentPeriod !== undefined) {
                localVarQueryParameter['paymentPeriod'] = paymentPeriod;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/compensation/salaries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a paginated list of additional payment types. The URL params help to return more accurate results.
         * @param {string} authorization A valid bearer token.
         * @param {number} [offset] Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
         * @param {number} [limit] Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdditionalPaymentTypes: async (authorization: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('listAdditionalPaymentTypes', 'authorization', authorization)
            const localVarPath = `/compensation/additional-payment-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/compensation/additional-payment-types',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a paginated list of additional payments. The URL params help to return more accurate results.
         * @param {string} authorization A valid bearer token.
         * @param {string} [userId] Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_userId* as a unique string. &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_userId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {string} [companyId] Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *_companyId* as a unique string. &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c* &lt;br&gt;&lt;br&gt; 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *_companyId&#x3D;80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {string} [currency] Optional filter. This field allows you to retrieve contracts based on their *currency* (ISO 4217). It can accept two formats:&lt;br&gt;&lt;br&gt; 1. A single *currency* as a unique string. &lt;br&gt;Example: *currency&#x3D;EUR* &lt;br&gt;&lt;br&gt; 2. Multiple *currency* values separated by commas (up to a maximum of 15 values). &lt;br&gt;Example: *currency&#x3D;EUR,USD*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
         * @param {number} [offset] Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
         * @param {number} [limit] Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdditionalPayments: async (authorization: string, userId?: string, companyId?: string, currency?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('listAdditionalPayments', 'authorization', authorization)
            const localVarPath = `/compensation/additional-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['_userId'] = userId;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['_companyId'] = companyId;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/compensation/additional-payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a paginated list of contract types. The URL params help to return more accurate results.
         * @param {string} authorization A valid bearer token.
         * @param {boolean} [isActive] This field allows to return only the active contract types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContractTypes: async (authorization: string, isActive?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('listContractTypes', 'authorization', authorization)
            const localVarPath = `/compensation/contract-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/compensation/contract-types',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompensationApi - functional programming interface
 * @export
 */
export const CompensationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompensationApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns a paginated list of employment contracts. The URL params help to return more accurate results.
         * @param {CompensationApiGetContractsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContracts(requestParameters: CompensationApiGetContractsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompensationGetContractsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContracts(requestParameters.authorization, requestParameters.contractTypeId, requestParameters.userId, requestParameters.companyId, requestParameters.offset, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a paginated list of employment salaries. The URL params help to return more accurate results.
         * @param {CompensationApiGetSalariesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalariesList(requestParameters: CompensationApiGetSalariesListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompensationGetSalariesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalariesList(requestParameters.authorization, requestParameters.userId, requestParameters.companyId, requestParameters.paymentPeriod, requestParameters.currency, requestParameters.offset, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a paginated list of additional payment types. The URL params help to return more accurate results.
         * @param {CompensationApiListAdditionalPaymentTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdditionalPaymentTypes(requestParameters: CompensationApiListAdditionalPaymentTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompensationListAdditionalPaymentTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdditionalPaymentTypes(requestParameters.authorization, requestParameters.offset, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a paginated list of additional payments. The URL params help to return more accurate results.
         * @param {CompensationApiListAdditionalPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdditionalPayments(requestParameters: CompensationApiListAdditionalPaymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompensationListAdditionalPaymentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdditionalPayments(requestParameters.authorization, requestParameters.userId, requestParameters.companyId, requestParameters.currency, requestParameters.offset, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a paginated list of contract types. The URL params help to return more accurate results.
         * @param {CompensationApiListContractTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContractTypes(requestParameters: CompensationApiListContractTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompensationListContractTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContractTypes(requestParameters.authorization, requestParameters.isActive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompensationApi - factory interface
 * @export
 */
export const CompensationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompensationApiFp(configuration)
    return {
        /**
         * This endpoint returns a paginated list of employment contracts. The URL params help to return more accurate results.
         * @param {CompensationApiGetContractsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts(requestParameters: CompensationApiGetContractsRequest, options?: AxiosRequestConfig): AxiosPromise<CompensationGetContractsResponse> {
            return localVarFp.getContracts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a paginated list of employment salaries. The URL params help to return more accurate results.
         * @param {CompensationApiGetSalariesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalariesList(requestParameters: CompensationApiGetSalariesListRequest, options?: AxiosRequestConfig): AxiosPromise<CompensationGetSalariesListResponse> {
            return localVarFp.getSalariesList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a paginated list of additional payment types. The URL params help to return more accurate results.
         * @param {CompensationApiListAdditionalPaymentTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdditionalPaymentTypes(requestParameters: CompensationApiListAdditionalPaymentTypesRequest, options?: AxiosRequestConfig): AxiosPromise<CompensationListAdditionalPaymentTypesResponse> {
            return localVarFp.listAdditionalPaymentTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a paginated list of additional payments. The URL params help to return more accurate results.
         * @param {CompensationApiListAdditionalPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdditionalPayments(requestParameters: CompensationApiListAdditionalPaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<CompensationListAdditionalPaymentsResponse> {
            return localVarFp.listAdditionalPayments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a paginated list of contract types. The URL params help to return more accurate results.
         * @param {CompensationApiListContractTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContractTypes(requestParameters: CompensationApiListContractTypesRequest, options?: AxiosRequestConfig): AxiosPromise<CompensationListContractTypesResponse> {
            return localVarFp.listContractTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getContracts operation in CompensationApi.
 * @export
 * @interface CompensationApiGetContractsRequest
 */
export type CompensationApiGetContractsRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof CompensationApiGetContracts
    */
    readonly authorization: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *contractTypeId*. It can accept two formats:<br><br> 1. A single *contractTypeId* as a unique string. <br>Example: *contractTypeId=80a2db290da29e126a18789c* <br><br> 2. Multiple *contractTypeId* values separated by commas (up to a maximum of 15 values). <br>Example: *contractTypeId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiGetContracts
    */
    readonly contractTypeId?: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:<br><br> 1. A single *_userId* as a unique string. <br>Example: *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). <br>Example: *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiGetContracts
    */
    readonly userId?: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:<br><br> 1. A single *_companyId* as a unique string. <br>Example: *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). <br>Example: *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiGetContracts
    */
    readonly companyId?: string
    
    /**
    * Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
    * @type {number}
    * @memberof CompensationApiGetContracts
    */
    readonly offset?: number
    
    /**
    * Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
    * @type {number}
    * @memberof CompensationApiGetContracts
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getSalariesList operation in CompensationApi.
 * @export
 * @interface CompensationApiGetSalariesListRequest
 */
export type CompensationApiGetSalariesListRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof CompensationApiGetSalariesList
    */
    readonly authorization: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:<br><br> 1. A single *_userId* as a unique string. <br>Example: *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). <br>Example: *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiGetSalariesList
    */
    readonly userId?: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:<br><br> 1. A single *_companyId* as a unique string. <br>Example: *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). <br>Example: *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiGetSalariesList
    */
    readonly companyId?: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *paymentPeriod*. Accepted values: \'Annual\', \'Monthly\' and \'Hourly\'. It can accept two formats:<br><br> 1. A single *paymentPeriod* as a unique string. <br>Example: *paymentPeriod=Annual* <br><br> 2. Multiple *paymentPeriod* values separated by commas (up to a maximum of 15 values). <br>Example: *paymentPeriod=Annual,Monthly*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {'Annual' | 'Monthly' | 'Hourly'}
    * @memberof CompensationApiGetSalariesList
    */
    readonly paymentPeriod?: 'Annual' | 'Monthly' | 'Hourly'
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *currency* (ISO 4217). It can accept two formats:<br><br> 1. A single *currency* as a unique string. <br>Example: *currency=EUR* <br><br> 2. Multiple *currency* values separated by commas (up to a maximum of 15 values). <br>Example: *currency=EUR,USD*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiGetSalariesList
    */
    readonly currency?: string
    
    /**
    * Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
    * @type {number}
    * @memberof CompensationApiGetSalariesList
    */
    readonly offset?: number
    
    /**
    * Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
    * @type {number}
    * @memberof CompensationApiGetSalariesList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listAdditionalPaymentTypes operation in CompensationApi.
 * @export
 * @interface CompensationApiListAdditionalPaymentTypesRequest
 */
export type CompensationApiListAdditionalPaymentTypesRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof CompensationApiListAdditionalPaymentTypes
    */
    readonly authorization: string
    
    /**
    * Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
    * @type {number}
    * @memberof CompensationApiListAdditionalPaymentTypes
    */
    readonly offset?: number
    
    /**
    * Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
    * @type {number}
    * @memberof CompensationApiListAdditionalPaymentTypes
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listAdditionalPayments operation in CompensationApi.
 * @export
 * @interface CompensationApiListAdditionalPaymentsRequest
 */
export type CompensationApiListAdditionalPaymentsRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof CompensationApiListAdditionalPayments
    */
    readonly authorization: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *_userId*. It can accept two formats:<br><br> 1. A single *_userId* as a unique string. <br>Example: *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId* values separated by commas (up to a maximum of 15 values). <br>Example: *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiListAdditionalPayments
    */
    readonly userId?: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *_companyId*. It can accept two formats:<br><br> 1. A single *_companyId* as a unique string. <br>Example: *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_companyId* values separated by commas (up to a maximum of 15 values). <br>Example: *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiListAdditionalPayments
    */
    readonly companyId?: string
    
    /**
    * Optional filter. This field allows you to retrieve contracts based on their *currency* (ISO 4217). It can accept two formats:<br><br> 1. A single *currency* as a unique string. <br>Example: *currency=EUR* <br><br> 2. Multiple *currency* values separated by commas (up to a maximum of 15 values). <br>Example: *currency=EUR,USD*. These options provide flexibility in filtering contracts by their type, making it easier to retrieve the specific data you need.
    * @type {string}
    * @memberof CompensationApiListAdditionalPayments
    */
    readonly currency?: string
    
    /**
    * Optional filter for pagination proposals. Determines the number of pages to skip when pagination is being used. If this value is not provided, by default the offset will be 1.
    * @type {number}
    * @memberof CompensationApiListAdditionalPayments
    */
    readonly offset?: number
    
    /**
    * Optional filter for pagination proposals. The maximum number of rows to retrieve which determines the size of the page. If this value is not provided then the limit will be 50 users. The maximum value of the limit is 100 users per page. Only are valid the following limit values: 25, 50 and 100.
    * @type {number}
    * @memberof CompensationApiListAdditionalPayments
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listContractTypes operation in CompensationApi.
 * @export
 * @interface CompensationApiListContractTypesRequest
 */
export type CompensationApiListContractTypesRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof CompensationApiListContractTypes
    */
    readonly authorization: string
    
    /**
    * This field allows to return only the active contract types.
    * @type {boolean}
    * @memberof CompensationApiListContractTypes
    */
    readonly isActive?: boolean
    
}

/**
 * CompensationApiGenerated - object-oriented interface
 * @export
 * @class CompensationApiGenerated
 * @extends {BaseAPI}
 */
export class CompensationApiGenerated extends BaseAPI {
    /**
     * This endpoint returns a paginated list of employment contracts. The URL params help to return more accurate results.
     * @param {CompensationApiGetContractsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationApiGenerated
     */
    public getContracts(requestParameters: CompensationApiGetContractsRequest, options?: AxiosRequestConfig) {
        return CompensationApiFp(this.configuration).getContracts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a paginated list of employment salaries. The URL params help to return more accurate results.
     * @param {CompensationApiGetSalariesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationApiGenerated
     */
    public getSalariesList(requestParameters: CompensationApiGetSalariesListRequest, options?: AxiosRequestConfig) {
        return CompensationApiFp(this.configuration).getSalariesList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a paginated list of additional payment types. The URL params help to return more accurate results.
     * @param {CompensationApiListAdditionalPaymentTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationApiGenerated
     */
    public listAdditionalPaymentTypes(requestParameters: CompensationApiListAdditionalPaymentTypesRequest, options?: AxiosRequestConfig) {
        return CompensationApiFp(this.configuration).listAdditionalPaymentTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a paginated list of additional payments. The URL params help to return more accurate results.
     * @param {CompensationApiListAdditionalPaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationApiGenerated
     */
    public listAdditionalPayments(requestParameters: CompensationApiListAdditionalPaymentsRequest, options?: AxiosRequestConfig) {
        return CompensationApiFp(this.configuration).listAdditionalPayments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a paginated list of contract types. The URL params help to return more accurate results.
     * @param {CompensationApiListContractTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationApiGenerated
     */
    public listContractTypes(requestParameters: CompensationApiListContractTypesRequest, options?: AxiosRequestConfig) {
        return CompensationApiFp(this.configuration).listContractTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
