/* tslint:disable */
/* eslint-disable */
/*
Kenjo API

Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationCreateBearerToken400Response } from '../models';
// @ts-ignore
import { UserAccountsListEmployeesResponseInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserAccountsApi - axios parameter creator
 * @export
 */
export const UserAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns an array of objects with the existing employees in Kenjo. Every object contains the basic employee information from **account**, **personal** and **work** sections per each existing employee.
         * @param {string} authorization A valid bearer token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('listEmployees', 'authorization', authorization)
            const localVarPath = `/user-accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user-accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAccountsApi - functional programming interface
 * @export
 */
export const UserAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns an array of objects with the existing employees in Kenjo. Every object contains the basic employee information from **account**, **personal** and **work** sections per each existing employee.
         * @param {UserAccountsApiListEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployees(requestParameters: UserAccountsApiListEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAccountsListEmployeesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployees(requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserAccountsApi - factory interface
 * @export
 */
export const UserAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAccountsApiFp(configuration)
    return {
        /**
         * This endpoint returns an array of objects with the existing employees in Kenjo. Every object contains the basic employee information from **account**, **personal** and **work** sections per each existing employee.
         * @param {UserAccountsApiListEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees(requestParameters: UserAccountsApiListEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UserAccountsListEmployeesResponseInner>> {
            return localVarFp.listEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listEmployees operation in UserAccountsApi.
 * @export
 * @interface UserAccountsApiListEmployeesRequest
 */
export type UserAccountsApiListEmployeesRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof UserAccountsApiListEmployees
    */
    readonly authorization: string
    
}

/**
 * UserAccountsApiGenerated - object-oriented interface
 * @export
 * @class UserAccountsApiGenerated
 * @extends {BaseAPI}
 */
export class UserAccountsApiGenerated extends BaseAPI {
    /**
     * This endpoint returns an array of objects with the existing employees in Kenjo. Every object contains the basic employee information from **account**, **personal** and **work** sections per each existing employee.
     * @param {UserAccountsApiListEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountsApiGenerated
     */
    public listEmployees(requestParameters: UserAccountsApiListEmployeesRequest, options?: AxiosRequestConfig) {
        return UserAccountsApiFp(this.configuration).listEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
