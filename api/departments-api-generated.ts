/* tslint:disable */
/* eslint-disable */
/*
Kenjo API

Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationCreateBearerToken400Response } from '../models';
// @ts-ignore
import { DepartmentsCreateNewDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentsCreateNewDepartmentResponse } from '../models';
// @ts-ignore
import { DepartmentsGetByIdResponse } from '../models';
// @ts-ignore
import { DepartmentsListDepartmentsResponseInner } from '../models';
// @ts-ignore
import { DepartmentsUpdateAttributesRequest } from '../models';
// @ts-ignore
import { DepartmentsUpdateAttributesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new department.<br>The *name* is the only required field.<br>
         * @param {string} authorization A valid bearer token.
         * @param {DepartmentsCreateNewDepartmentRequest} departmentsCreateNewDepartmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment: async (authorization: string, departmentsCreateNewDepartmentRequest: DepartmentsCreateNewDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createNewDepartment', 'authorization', authorization)
            // verify required parameter 'departmentsCreateNewDepartmentRequest' is not null or undefined
            assertParamExists('createNewDepartment', 'departmentsCreateNewDepartmentRequest', departmentsCreateNewDepartmentRequest)
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsCreateNewDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/departments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsCreateNewDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the department referenced by *id*.
         * @param {string} id The _id of the department entry to request.
         * @param {string} authorization A valid bearer token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getById', 'authorization', authorization)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/departments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the existing departments in Kenjo.
         * @param {string} authorization A valid bearer token.
         * @param {string} [name] The department name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDepartments: async (authorization: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('listDepartments', 'authorization', authorization)
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/departments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the department referenced by *id*.
         * @param {string} id The _id of the department entry to request.
         * @param {string} authorization A valid bearer token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (id: string, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeById', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('removeById', 'authorization', authorization)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/departments/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a deparment referenced by *id*. Only the attributes submitted are modified.
         * @param {string} id The _id of the deparment entry to request.
         * @param {string} authorization A valid bearer token.
         * @param {DepartmentsUpdateAttributesRequest} departmentsUpdateAttributesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributes: async (id: string, authorization: string, departmentsUpdateAttributesRequest: DepartmentsUpdateAttributesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAttributes', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateAttributes', 'authorization', authorization)
            // verify required parameter 'departmentsUpdateAttributesRequest' is not null or undefined
            assertParamExists('updateAttributes', 'departmentsUpdateAttributesRequest', departmentsUpdateAttributesRequest)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsUpdateAttributesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/departments/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsUpdateAttributesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new department.<br>The *name* is the only required field.<br>
         * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsCreateNewDepartmentResponse>> {
            const departmentsCreateNewDepartmentRequest: DepartmentsCreateNewDepartmentRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDepartment(requestParameters.authorization, departmentsCreateNewDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the department referenced by *id*.
         * @param {DepartmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: DepartmentsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the existing departments in Kenjo.
         * @param {DepartmentsApiListDepartmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDepartments(requestParameters: DepartmentsApiListDepartmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentsListDepartmentsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDepartments(requestParameters.authorization, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the department referenced by *id*.
         * @param {DepartmentsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: DepartmentsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.id, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a deparment referenced by *id*. Only the attributes submitted are modified.
         * @param {DepartmentsApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttributes(requestParameters: DepartmentsApiUpdateAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsUpdateAttributesResponse>> {
            const departmentsUpdateAttributesRequest: DepartmentsUpdateAttributesRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttributes(requestParameters.id, requestParameters.authorization, departmentsUpdateAttributesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * Creates a new department.<br>The *name* is the only required field.<br>
         * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsCreateNewDepartmentResponse> {
            return localVarFp.createNewDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the department referenced by *id*.
         * @param {DepartmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: DepartmentsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the existing departments in Kenjo.
         * @param {DepartmentsApiListDepartmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDepartments(requestParameters: DepartmentsApiListDepartmentsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<DepartmentsListDepartmentsResponseInner>> {
            return localVarFp.listDepartments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the department referenced by *id*.
         * @param {DepartmentsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: DepartmentsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a deparment referenced by *id*. Only the attributes submitted are modified.
         * @param {DepartmentsApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributes(requestParameters: DepartmentsApiUpdateAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsUpdateAttributesResponse> {
            return localVarFp.updateAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiCreateNewDepartmentRequest
 */
export type DepartmentsApiCreateNewDepartmentRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof DepartmentsApiCreateNewDepartment
    */
    readonly authorization: string
    
} & DepartmentsCreateNewDepartmentRequest

/**
 * Request parameters for getById operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiGetByIdRequest
 */
export type DepartmentsApiGetByIdRequest = {
    
    /**
    * The _id of the department entry to request.
    * @type {string}
    * @memberof DepartmentsApiGetById
    */
    readonly id: string
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof DepartmentsApiGetById
    */
    readonly authorization: string
    
}

/**
 * Request parameters for listDepartments operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiListDepartmentsRequest
 */
export type DepartmentsApiListDepartmentsRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof DepartmentsApiListDepartments
    */
    readonly authorization: string
    
    /**
    * The department name.
    * @type {string}
    * @memberof DepartmentsApiListDepartments
    */
    readonly name?: string
    
}

/**
 * Request parameters for removeById operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiRemoveByIdRequest
 */
export type DepartmentsApiRemoveByIdRequest = {
    
    /**
    * The _id of the department entry to request.
    * @type {string}
    * @memberof DepartmentsApiRemoveById
    */
    readonly id: string
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof DepartmentsApiRemoveById
    */
    readonly authorization: string
    
}

/**
 * Request parameters for updateAttributes operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiUpdateAttributesRequest
 */
export type DepartmentsApiUpdateAttributesRequest = {
    
    /**
    * The _id of the deparment entry to request.
    * @type {string}
    * @memberof DepartmentsApiUpdateAttributes
    */
    readonly id: string
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof DepartmentsApiUpdateAttributes
    */
    readonly authorization: string
    
} & DepartmentsUpdateAttributesRequest

/**
 * DepartmentsApiGenerated - object-oriented interface
 * @export
 * @class DepartmentsApiGenerated
 * @extends {BaseAPI}
 */
export class DepartmentsApiGenerated extends BaseAPI {
    /**
     * Creates a new department.<br>The *name* is the only required field.<br>
     * @param {DepartmentsApiCreateNewDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public createNewDepartment(requestParameters: DepartmentsApiCreateNewDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).createNewDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the department referenced by *id*.
     * @param {DepartmentsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public getById(requestParameters: DepartmentsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the existing departments in Kenjo.
     * @param {DepartmentsApiListDepartmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public listDepartments(requestParameters: DepartmentsApiListDepartmentsRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).listDepartments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the department referenced by *id*.
     * @param {DepartmentsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public removeById(requestParameters: DepartmentsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a deparment referenced by *id*. Only the attributes submitted are modified.
     * @param {DepartmentsApiUpdateAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public updateAttributes(requestParameters: DepartmentsApiUpdateAttributesRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).updateAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
