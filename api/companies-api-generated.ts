/* tslint:disable */
/* eslint-disable */
/*
Kenjo API

Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationCreateBearerToken400Response } from '../models';
// @ts-ignore
import { CompaniesGetListResponseInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of the existing companies in Kenjo.
         * @param {string} authorization A valid bearer token.
         * @param {string} [name] The name of the company.
         * @param {string} [city] The city of the company.
         * @param {string} [country] The country code of the company in ISO 3166-1 alpha-2.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (authorization: string, name?: string, city?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getList', 'authorization', authorization)
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of the existing companies in Kenjo.
         * @param {CompaniesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: CompaniesApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompaniesGetListResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.authorization, requestParameters.name, requestParameters.city, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * Returns a list of the existing companies in Kenjo.
         * @param {CompaniesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: CompaniesApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CompaniesGetListResponseInner>> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getList operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetListRequest
 */
export type CompaniesApiGetListRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof CompaniesApiGetList
    */
    readonly authorization: string
    
    /**
    * The name of the company.
    * @type {string}
    * @memberof CompaniesApiGetList
    */
    readonly name?: string
    
    /**
    * The city of the company.
    * @type {string}
    * @memberof CompaniesApiGetList
    */
    readonly city?: string
    
    /**
    * The country code of the company in ISO 3166-1 alpha-2.
    * @type {string}
    * @memberof CompaniesApiGetList
    */
    readonly country?: string
    
}

/**
 * CompaniesApiGenerated - object-oriented interface
 * @export
 * @class CompaniesApiGenerated
 * @extends {BaseAPI}
 */
export class CompaniesApiGenerated extends BaseAPI {
    /**
     * Returns a list of the existing companies in Kenjo.
     * @param {CompaniesApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getList(requestParameters: CompaniesApiGetListRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
