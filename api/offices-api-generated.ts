/* tslint:disable */
/* eslint-disable */
/*
Kenjo API

Before starting to use the Kenjo API, you have to request the API activation for a sandbox or production environment to the Kenjo Customer Success team. After that, an admin user has to go to *Settings > Integrations > API keys*, to generate the **API Key**. Follow the steps described in the **Autentication section** of this document. <br>The API key is needed to request the bearer token. Each endpoint callout requires a valid bearer token in the Authorization header. Once the token is retrieved, it will be useful during the time limit indicated by the 'expiration date'.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationCreateBearerToken400Response } from '../models';
// @ts-ignore
import { OfficesCreateNewOfficeRequest } from '../models';
// @ts-ignore
import { OfficesCreateNewOfficeResponse } from '../models';
// @ts-ignore
import { OfficesGetByIdResponse } from '../models';
// @ts-ignore
import { OfficesGetListResponseInner } from '../models';
// @ts-ignore
import { OfficesUpdateOfficeAttributesRequest } from '../models';
// @ts-ignore
import { OfficesUpdateOfficeAttributesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OfficesApi - axios parameter creator
 * @export
 */
export const OfficesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new office.<br><br>The required fields are *name*, *companyId*, *calendarId*.<br>Optional fields are *street*, *postalCode*, *city* and *country*. <br> The *country* field has to be a valid ISO country code.
         * @param {string} authorization A valid bearer token.
         * @param {OfficesCreateNewOfficeRequest} officesCreateNewOfficeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOffice: async (authorization: string, officesCreateNewOfficeRequest: OfficesCreateNewOfficeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createNewOffice', 'authorization', authorization)
            // verify required parameter 'officesCreateNewOfficeRequest' is not null or undefined
            assertParamExists('createNewOffice', 'officesCreateNewOfficeRequest', officesCreateNewOfficeRequest)
            const localVarPath = `/offices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: officesCreateNewOfficeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/offices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(officesCreateNewOfficeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the office referenced by *id*.
         * @param {string} id The _id of the office entry to request.
         * @param {string} authorization A valid bearer token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getById', 'authorization', authorization)
            const localVarPath = `/offices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/offices/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the existing offices in Kenjo.
         * @param {string} authorization A valid bearer token.
         * @param {string} [name] The name of the office.
         * @param {string} [companyId] The Kenjo id of the company.
         * @param {string} [calendarId] The Kenjo id of the calendar.
         * @param {string} [street] The street of the office.
         * @param {string} [postalCode] The postal code of the office.
         * @param {string} [city] The city of the office.
         * @param {string} [country] The country of the office in ISO code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (authorization: string, name?: string, companyId?: string, calendarId?: string, street?: string, postalCode?: string, city?: string, country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getList', 'authorization', authorization)
            const localVarPath = `/offices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (calendarId !== undefined) {
                localVarQueryParameter['calendarId'] = calendarId;
            }

            if (street !== undefined) {
                localVarQueryParameter['street'] = street;
            }

            if (postalCode !== undefined) {
                localVarQueryParameter['postalCode'] = postalCode;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/offices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the office referenced by *id*.
         * @param {string} id The _id of the office entry to request.
         * @param {string} authorization A valid bearer token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (id: string, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeById', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('removeById', 'authorization', authorization)
            const localVarPath = `/offices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/offices/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an office referenced by *id*. Only the attributes submitted are modified.
         * @param {string} id The _id of the office entry to request.
         * @param {string} authorization A valid bearer token.
         * @param {OfficesUpdateOfficeAttributesRequest} officesUpdateOfficeAttributesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOfficeAttributes: async (id: string, authorization: string, officesUpdateOfficeAttributesRequest: OfficesUpdateOfficeAttributesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOfficeAttributes', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateOfficeAttributes', 'authorization', authorization)
            // verify required parameter 'officesUpdateOfficeAttributesRequest' is not null or undefined
            assertParamExists('updateOfficeAttributes', 'officesUpdateOfficeAttributesRequest', officesUpdateOfficeAttributesRequest)
            const localVarPath = `/offices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: officesUpdateOfficeAttributesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/offices/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(officesUpdateOfficeAttributesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfficesApi - functional programming interface
 * @export
 */
export const OfficesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfficesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new office.<br><br>The required fields are *name*, *companyId*, *calendarId*.<br>Optional fields are *street*, *postalCode*, *city* and *country*. <br> The *country* field has to be a valid ISO country code.
         * @param {OfficesApiCreateNewOfficeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewOffice(requestParameters: OfficesApiCreateNewOfficeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficesCreateNewOfficeResponse>> {
            const officesCreateNewOfficeRequest: OfficesCreateNewOfficeRequest = {
                name: requestParameters.name,
                companyId: requestParameters.companyId,
                calendarId: requestParameters.calendarId,
                country: requestParameters.country,
                postalCode: requestParameters.postalCode,
                city: requestParameters.city,
                street: requestParameters.street
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewOffice(requestParameters.authorization, officesCreateNewOfficeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the office referenced by *id*.
         * @param {OfficesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: OfficesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficesGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the existing offices in Kenjo.
         * @param {OfficesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: OfficesApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OfficesGetListResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.authorization, requestParameters.name, requestParameters.companyId, requestParameters.calendarId, requestParameters.street, requestParameters.postalCode, requestParameters.city, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the office referenced by *id*.
         * @param {OfficesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: OfficesApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.id, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an office referenced by *id*. Only the attributes submitted are modified.
         * @param {OfficesApiUpdateOfficeAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOfficeAttributes(requestParameters: OfficesApiUpdateOfficeAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficesUpdateOfficeAttributesResponse>> {
            const officesUpdateOfficeAttributesRequest: OfficesUpdateOfficeAttributesRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOfficeAttributes(requestParameters.id, requestParameters.authorization, officesUpdateOfficeAttributesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfficesApi - factory interface
 * @export
 */
export const OfficesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfficesApiFp(configuration)
    return {
        /**
         * Creates a new office.<br><br>The required fields are *name*, *companyId*, *calendarId*.<br>Optional fields are *street*, *postalCode*, *city* and *country*. <br> The *country* field has to be a valid ISO country code.
         * @param {OfficesApiCreateNewOfficeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOffice(requestParameters: OfficesApiCreateNewOfficeRequest, options?: AxiosRequestConfig): AxiosPromise<OfficesCreateNewOfficeResponse> {
            return localVarFp.createNewOffice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the office referenced by *id*.
         * @param {OfficesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: OfficesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OfficesGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the existing offices in Kenjo.
         * @param {OfficesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: OfficesApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OfficesGetListResponseInner>> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the office referenced by *id*.
         * @param {OfficesApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: OfficesApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an office referenced by *id*. Only the attributes submitted are modified.
         * @param {OfficesApiUpdateOfficeAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOfficeAttributes(requestParameters: OfficesApiUpdateOfficeAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<OfficesUpdateOfficeAttributesResponse> {
            return localVarFp.updateOfficeAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewOffice operation in OfficesApi.
 * @export
 * @interface OfficesApiCreateNewOfficeRequest
 */
export type OfficesApiCreateNewOfficeRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof OfficesApiCreateNewOffice
    */
    readonly authorization: string
    
} & OfficesCreateNewOfficeRequest

/**
 * Request parameters for getById operation in OfficesApi.
 * @export
 * @interface OfficesApiGetByIdRequest
 */
export type OfficesApiGetByIdRequest = {
    
    /**
    * The _id of the office entry to request.
    * @type {string}
    * @memberof OfficesApiGetById
    */
    readonly id: string
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof OfficesApiGetById
    */
    readonly authorization: string
    
}

/**
 * Request parameters for getList operation in OfficesApi.
 * @export
 * @interface OfficesApiGetListRequest
 */
export type OfficesApiGetListRequest = {
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly authorization: string
    
    /**
    * The name of the office.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly name?: string
    
    /**
    * The Kenjo id of the company.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly companyId?: string
    
    /**
    * The Kenjo id of the calendar.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly calendarId?: string
    
    /**
    * The street of the office.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly street?: string
    
    /**
    * The postal code of the office.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly postalCode?: string
    
    /**
    * The city of the office.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly city?: string
    
    /**
    * The country of the office in ISO code.
    * @type {string}
    * @memberof OfficesApiGetList
    */
    readonly country?: string
    
}

/**
 * Request parameters for removeById operation in OfficesApi.
 * @export
 * @interface OfficesApiRemoveByIdRequest
 */
export type OfficesApiRemoveByIdRequest = {
    
    /**
    * The _id of the office entry to request.
    * @type {string}
    * @memberof OfficesApiRemoveById
    */
    readonly id: string
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof OfficesApiRemoveById
    */
    readonly authorization: string
    
}

/**
 * Request parameters for updateOfficeAttributes operation in OfficesApi.
 * @export
 * @interface OfficesApiUpdateOfficeAttributesRequest
 */
export type OfficesApiUpdateOfficeAttributesRequest = {
    
    /**
    * The _id of the office entry to request.
    * @type {string}
    * @memberof OfficesApiUpdateOfficeAttributes
    */
    readonly id: string
    
    /**
    * A valid bearer token.
    * @type {string}
    * @memberof OfficesApiUpdateOfficeAttributes
    */
    readonly authorization: string
    
} & OfficesUpdateOfficeAttributesRequest

/**
 * OfficesApiGenerated - object-oriented interface
 * @export
 * @class OfficesApiGenerated
 * @extends {BaseAPI}
 */
export class OfficesApiGenerated extends BaseAPI {
    /**
     * Creates a new office.<br><br>The required fields are *name*, *companyId*, *calendarId*.<br>Optional fields are *street*, *postalCode*, *city* and *country*. <br> The *country* field has to be a valid ISO country code.
     * @param {OfficesApiCreateNewOfficeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public createNewOffice(requestParameters: OfficesApiCreateNewOfficeRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).createNewOffice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the office referenced by *id*.
     * @param {OfficesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public getById(requestParameters: OfficesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the existing offices in Kenjo.
     * @param {OfficesApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public getList(requestParameters: OfficesApiGetListRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the office referenced by *id*.
     * @param {OfficesApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public removeById(requestParameters: OfficesApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an office referenced by *id*. Only the attributes submitted are modified.
     * @param {OfficesApiUpdateOfficeAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficesApiGenerated
     */
    public updateOfficeAttributes(requestParameters: OfficesApiUpdateOfficeAttributesRequest, options?: AxiosRequestConfig) {
        return OfficesApiFp(this.configuration).updateOfficeAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
